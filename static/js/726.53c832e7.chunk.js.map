{"version":3,"file":"static/js/726.53c832e7.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,KAAO,sBAAsB,QAAU,yBAAyB,OAAS,0B,SC2B5H,EAnBgB,SAACA,GAQb,OAAQ,+BACA,gBAAKC,UAAWC,EAAAA,QAAhB,SAAkCF,EAAMG,a,UCDpD,EAPmB,SAACH,GAChB,OAAQ,gBAAKC,UAAWC,EAAAA,KAAhB,UACJ,SAAC,KAAD,CAASE,GAAI,YAAcJ,EAAMK,GAAIC,gBAAiBJ,EAAAA,OAAtD,SAAuEF,EAAMO,U,UCuCrF,EAxCuB,SAACP,GACpB,IAAMQ,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,KAAM,IAEVC,SAAU,SAAAC,GACNb,EAAMc,YAAYD,EAAOF,MACzBH,EAAOO,aAEXC,SAAU,SAACH,GACP,IAAMI,EAAqB,GAK3B,OAHKJ,EAAOF,OACRM,EAAON,KAAO,YAEXM,KAKf,OACI,kBAAML,SAAUJ,EAAOU,aAAvB,WACI,4BACI,qBACIC,YAAY,uBACZZ,KAAK,OACLa,SAAUZ,EAAOa,aACjBC,MAAOd,EAAOK,OAAOF,OAGxBH,EAAOe,QAAQZ,MAAQH,EAAOS,OAAON,OAClC,gBAAKa,MAAO,CAACC,MAAO,OAApB,SAA6BjB,EAAOS,OAAON,WAEnD,0BACI,mBAAQe,KAAK,SAAb,gCCJhB,EAzBgB,SAAC1B,GAEb,IAAM2B,EAAiB3B,EAAM4B,YAAYC,YAAYC,KAAI,SAAAC,GACrD,OAAO,SAAC,EAAD,CAAYxB,KAAMwB,EAAExB,KAAMF,GAAI0B,EAAE1B,IAAS0B,EAAE1B,OAEhD2B,EAAoBhC,EAAM4B,YAAYK,aAAaH,KAAI,SAAAC,GACzD,OAAO,SAAC,EAAD,CAAS5B,QAAS4B,EAAE5B,QAASE,GAAI0B,EAAE1B,IAAS0B,EAAE1B,OAGzD,OACI,iBAAKJ,UAAWC,EAAAA,QAAhB,WAEI,gBAAKD,UAAWC,EAAAA,cAAhB,SACKyB,KAGL,iBAAK1B,UAAWC,EAAAA,SAAhB,WACI,+BAAO8B,EAAP,QACD,SAAC,EAAD,CAAgBlB,YAAad,EAAMc,qB,mBCLlD,GAAeoB,E,QAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAACC,GACnB,MAAO,CACHR,YAAaQ,EAAMR,eAML,CACdd,YAAauB,EAAAA,IAEjBC,EAAAA,EALJ,CAMEC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/MessageItem/Dialogs.tsx","components/Dialogs/Dialogitem/DialogsItem.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"item\":\"Dialogs_item__q23mU\",\"message\":\"Dialogs_message__ZEWo0\",\"active\":\"Dialogs_active__t8cjl\"};","import React from 'react';\nimport styleDi from '.././Dialogs.module.css'\n\ntype MessagePropsType = {\n    message: string\n    id: string\n}\n\n\nconst Message = (props: MessagePropsType) => {\n\n    /*const newMessageElement = React.createRef<HTMLTextAreaElement>()\n    const sendMessagehandler =()=>{\n        let message = newMessageElement.current?.value\n        alert(message)\n    }\n*/\n    return (<>\n            <div className={styleDi.message}>{props.message}\n\n            </div>\n            {/*   <textarea ref={newMessageElement}>  </textarea>\n             <button onClick={sendMessagehandler}>send message</button>*/}\n        </>\n\n    )\n}\n\nexport default Message;","import React from 'react';\nimport styleDi from '.././Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogItemPropsType = {\n    name: string\n    id: string\n}\n\n\nconst DialogItem = (props: DialogItemPropsType) => {\n    return (<div className={styleDi.item}>\n        <NavLink to={\"/dialogs/\" + props.id} activeClassName={styleDi.active}>{props.name}</NavLink>\n    </div>)\n}\n\n\nexport default DialogItem;","import React from 'react';\nimport {useFormik} from \"formik\";\n\ntype PropsType = {\n    sendMessage: (messageBody: string) => void\n}\n\ntype FormikType = {\n    Text?: string\n}\n\nconst AddMessageForm = (props: PropsType) => {\n    const formik = useFormik({\n        initialValues: {\n            Text: '',\n        },\n        onSubmit: values => {\n            props.sendMessage(values.Text)\n            formik.resetForm()\n        },\n        validate: (values: FormikType) => {\n            const errors: FormikType = {}\n\n            if (!values.Text) {\n                errors.Text = \"Required\"\n            }\n            return errors\n        },\n    });\n\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div>\n                <textarea\n                    placeholder=\"Send messages Formik\"\n                    name=\"Text\"\n                    onChange={formik.handleChange}\n                    value={formik.values.Text}\n                ></textarea>\n\n                {formik.touched.Text && formik.errors.Text &&\n                    <div style={{color: \"red\"}}>{formik.errors.Text}</div>}\n            </div>\n            <div>\n                <button type=\"submit\">Send message</button>\n            </div>\n        </form>\n    );\n};\n\nexport default AddMessageForm;","import React from 'react';\nimport styleDi from './Dialogs.module.css'\nimport Message from \"./MessageItem/Dialogs\";\nimport {DialogsPageType} from \"../../Redux/Types\";\n\nimport DialogItem from \"./Dialogitem/DialogsItem\";\nimport AddMessageForm from \"./AddMessageForm\";\n\n\ntype DialogsPropsType = {\n    dialogsPage: DialogsPageType\n    sendMessage: (messageBody: string) => void\n    //isAuth: boolean\n}\n\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    const mapDialogsItem = props.dialogsPage.dialogsData.map(e => {\n        return <DialogItem name={e.name} id={e.id} key={e.id}/>\n    })\n    const mapMessageElement = props.dialogsPage.messagesData.map(e => {\n        return <Message message={e.message} id={e.id} key={e.id}/>\n    })\n\n    return (\n        <div className={styleDi.dialogs}>\n\n            <div className={styleDi.dialogs_items}>\n                {mapDialogsItem}\n            </div>\n\n            <div className={styleDi.messages}>\n                <div> {mapMessageElement} </div>\n               <AddMessageForm sendMessage={props.sendMessage}/>\n            </div>\n        </div>\n    )\n        ;\n};\n\nexport default Dialogs;","import React from 'react';\nimport {\n    InitialStateDialogsType,\n    sendMessageActionCreator,\n} from \"../../Redux/dialogs-reducer\";\n\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../Redux/Redux-store\";\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    dialogsPage: InitialStateDialogsType\n\n}\n\ntype mapDispatchToPropsType = {\n\n    sendMessage: (messageBody:string) => void\n}\n\nlet mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppRootStateType>\n    (mapStateToProps, {\n        sendMessage: sendMessageActionCreator\n    }),\n    WithAuthRedirect\n)(Dialogs);"],"names":["props","className","styleDi","message","to","id","activeClassName","name","formik","useFormik","initialValues","Text","onSubmit","values","sendMessage","resetForm","validate","errors","handleSubmit","placeholder","onChange","handleChange","value","touched","style","color","type","mapDialogsItem","dialogsPage","dialogsData","map","e","mapMessageElement","messagesData","compose","connect","state","sendMessageActionCreator","WithAuthRedirect","Dialogs"],"sourceRoot":""}